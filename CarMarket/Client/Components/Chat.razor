@inject IHttpService Http
@inject ISnackbar SnackBar

@if (isActive)
{
    <MudCard Elevation="10" Class="fixed-div">
        <div class="chat-area">
            <MudIconButton OnClick="@(() => isActive = false)" Color="Color.Primary" Icon="@Icons.Material.Filled.Cancel" Class="absolute-btn" />
            @foreach (var message in ChatHandler.Messages)
            {
                @if (message.User.Equals(user))
                {
                    <MudChat ChatPosition="ChatBubblePosition.End" Color="Color.Primary">
                        <MudAvatar Color="Color.Primary">@message.User</MudAvatar>
                        <MudChatBubble>
                            <MudTextField T="string" Variant="Variant.Text" Text="@message.Message" AutoGrow Typo="Typo.body2" Disabled Style="width: 300px" />
                        </MudChatBubble>
                    </MudChat>
                }
                else
                {
                    <MudChat ChatPosition="ChatBubblePosition.Start" Color="Color.Tertiary">
                        <MudAvatar Color="Color.Tertiary">@message.User</MudAvatar>
                        <MudChatBubble>
                            <MudTextField T="string" Variant="Variant.Text" Text="@message.Message" AutoGrow Typo="Typo.body2" Disabled Style="width: 300px" />
                        </MudChatBubble>
                    </MudChat>
                }
            }
        </div>
        <div class="text-area">
            <MudTextField T="string" Variant="Variant.Text" @bind-Value="message" Placeholder="Napisz coœ!" Lines="2" Typo="Typo.body2" Clearable />
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendMessage">Wyœlij</MudButton>
        </div>
    </MudCard>
}
else
{
    <div class="fixed-mudfab">
        <MudFab OnClick="@(() => isActive = true)" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ChatBubble" />
    </div>
}


@code {
    private bool isActive;
    private string message = string.Empty;
    private string user = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        Random random = new Random();
        user = random.Next(10, 100).ToString();
        ChatHandler.OnChange += NotifyStateHasChanged;
        await ChatHandler.SubscribeChat();
    }

    public async Task SendMessage()
    {
        try
        {
            var chatMessage = new ChatMessage(user, message);

            await Http.Post($"api/{Routes.ChatMessageApi}/SendMessage/", chatMessage);
            message = string.Empty;

            SnackBar.Add($"Wys³ano wiadomoœæ", Severity.Success);
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Nie wys³ano wiadomoœci", Severity.Error);
            Console.WriteLine(ex);
        }
    }

    public void Dispose()
    {
        ChatHandler.OnChange -= NotifyStateHasChanged;
    }

    public async void NotifyStateHasChanged()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}